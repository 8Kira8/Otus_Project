
#Область ОписаниеПеременных

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Перем ОтключитьАвтоЗаполнениеРеквизитов;

&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("СтруктураЗаполнения") Тогда
		СтруктураЗаполнения = Параметры.СтруктураЗаполнения;
		ЗаполнитьЗначенияСвойств(Объект, СтруктураЗаполнения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриСозданииЧтенииНаСервере();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ЮрФизЛицо) Тогда
		Объект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыПриСозданииНаСервере = ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаСправочника();
	ПараметрыПриСозданииНаСервере.Форма                 = ЭтотОбъект;
	ПараметрыПриСозданииНаСервере.МестоРазмещенияКоманд = Элементы.КомандыЭДО;
	ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаСправочника(ПараметрыПриСозданииНаСервере);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	ДополнительныеПараметры = УправлениеКонтактнойИнформацией.ПараметрыКонтактнойИнформации();
	РазмещеныНаФорме = Новый Соответствие;
	РазмещеныНаФорме.Вставить(Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, Истина);
	ДополнительныеПараметры.РазмещеныНаФорме = РазмещеныНаФорме;
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Объект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	Если Параметры.Ключ.Пустая() Тогда
		ЗаполнитьРеквизитыПоТекстуЗаполнения(Параметры.ТекстЗаполнения);
	КонецЕсли;
	ПроверкаКонтрагентов.ПриСозданииНаСервереКонтрагент(ЭтотОбъект, Параметры);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	УправлениеФормойНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПрочитатьОсновнойБанковскийСчет();
	
	ПриСозданииЧтенииНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОткрытииКонтрагент(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыПриОткрытии = ОбменСКонтрагентамиКлиент.ПараметрыПриОткрытии();
	ПараметрыПриОткрытии.Форма                            = ЭтотОбъект;
	ПараметрыПриОткрытии.МестоРазмещенияКоманд            = Элементы.КомандыЭДО;
	ПараметрыПриОткрытии.ЕстьОбработчикОбновитьКомандыЭДО = Истина;
	
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ПараметрыПриОткрытии);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьСостояниеЭД"
		ИЛИ (ИмяСобытия = "ЗагрузкаРеквизитовКонтрагентаИзФайла" И Параметр = Объект.Ссылка) Тогда
		Прочитать();
		
	ИначеЕсли ИмяСобытия = "ЗагруженАдресныйКлассификатор"
		ИЛИ ИмяСобытия = "Запись_НаборКонстант" 
			И Источник = "ИсточникДанныхАдресногоКлассификатора" Тогда
		
		АдресныйКлассификаторПуст = АдресныйКлассификаторПуст();
		
		Элементы.ГруппаЗагрузкаАдресногоКлассификатора.Видимость = АдресныйКлассификаторПуст;
		
	ИначеЕсли ИмяСобытия = "УстановкаОсновногоБанковскогоСчета"
		ИЛИ ИмяСобытия = "УстановкаОсновногоБанковскогоСчетаПриЗаписи"
		И Параметр.Владелец = Объект.Ссылка Тогда
		
		// Если основным назначен другой банковский счет, то разблокируем предыдущий основной.
		Если Объект.ОсновнойБанковскийСчет <> Параметр.ОсновнойБанковскийСчет 
			И БанковскийСчетЗаблокирован Тогда
			РазблокироватьБанковскийСчетПриРедактированииНаСервере(Объект.ОсновнойБанковскийСчет, УникальныйИдентификатор);
			БанковскийСчетЗаблокирован = Ложь;
		КонецЕсли; 
		
		Объект.ОсновнойБанковскийСчет = Параметр.ОсновнойБанковскийСчет;
		
		ПрочитатьОсновнойБанковскийСчет();
		
		Если НЕ Модифицированность Тогда
			Записать();
		КонецЕсли;
		
		УстановитьЗаголовокОсновногоБанковскогоСчета(ЭтотОбъект);
		
		Оповестить("УстановкаОсновногоБанковскогоСчетаВыполнена");
	
	Иначе
		
		// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
		ПараметрыОповещенияЭДО = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаСправочника();
		ПараметрыОповещенияЭДО.Форма                            = ЭтотОбъект;
		ПараметрыОповещенияЭДО.МестоРазмещенияКоманд            = Элементы.КомандыЭДО;
		ПараметрыОповещенияЭДО.ЕстьОбработчикОбновитьКомандыЭДО = Истина;

		ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаСправочника(ИмяСобытия, Параметр, Источник, ПараметрыОповещенияЭДО);
		// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Справочники.БанковскиеСчета.ОбработкаПроверкиЗаполнения(БанковскийСчет, Отказ);
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтаФорма, Объект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	ПараметрыОтбора = Новый Структура("Вид", Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
	НайденныеСтроки = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(ПараметрыОтбора);
	
	СтранаАдреса = Неопределено;
	Если НайденныеСтроки.Количество()
		И ЗначениеЗаполнено(НайденныеСтроки[0].Значение) Тогда
		СтранаАдреса = УправлениеКонтактнойИнформацией.СтранаАдресаКонтактнойИнформации(НайденныеСтроки[0].Значение);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтранаАдреса) Тогда
	ИначеЕсли Объект.ЮрФизЛицо <> Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент
		И СтранаАдреса.Ссылка <> Справочники.СтраныМира.Россия Тогда
		ШаблонСообщения = НСтр("ru = 'Юридический адрес введен некорректно.
			|Для вида контрагента ""%1"" допускается ввод только российских адресов.'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, Объект.ЮрФизЛицо);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,
			Объект.Ссылка, "КонтактнаяИнформацияПолеЮрАдресКонтрагента",,Отказ);
	ИначеЕсли Объект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент
		И ((ЗначениеЗаполнено(СтранаАдреса.Ссылка) И СтранаАдреса.Ссылка = Справочники.СтраныМира.Россия)
			ИЛИ (Не ЗначениеЗаполнено(СтранаАдреса.Ссылка) И Не ЗначениеЗаполнено(СтранаАдреса.Код))) Тогда
		ШаблонСообщения = НСтр("ru = 'Юридический адрес введен некорректно.
			|Для вида контрагента ""%1"" допускается ввод только иностранных адресов.'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, Объект.ЮрФизЛицо);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,
			Объект.Ссылка, "КонтактнаяИнформацияПолеЮрАдресКонтрагента",,Отказ);
	КонецЕсли;
	
	Если Объект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Объект.ИНН) Тогда
		ТекстСообщения = НСтр("ru = 'ИНН должен состоять только из цифр.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "ИНН", "Объект", Отказ);
	КонецЕсли;
	
	Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Объект.КПП) Тогда
		Отказ = Истина;
		ТекстСообщения = НСтр("ru = 'КПП должен состоять только из цифр.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "КПП", "Объект", Отказ);
	КонецЕсли;
	
	Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Объект.КодПоОКПО) Тогда
		Отказ = Истина;
		ТекстСообщения = НСтр("ru = 'ОКПО должен состоять только из цифр.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "КодПоОКПО", "Объект", Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
		
	Если ЗначениеЗаполнено(БанковскийСчет.НомерСчета) И ЗначениеЗаполнено(БанковскийСчет.Банк)
		И СтрДлина(СокрЛП(БанковскийСчет.НомерСчета)) < 20 Тогда
		ТекстСообщения = НСтр("ru = 'Номер счета должен состоять из 20 цифр'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,"БанковскийСчет.НомерСчета",,Отказ);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ИзмененБанковскийСчет Тогда
		Если ЗначениеЗаполнено(БанковскийСчет.НомерСчета) И ЗначениеЗаполнено(БанковскийСчет.Банк)Тогда
			
			НайденныйБанковскийСчет = Справочники.БанковскиеСчета.БанковскийСчетПоРеквизитам(ТекущийОбъект.Ссылка, 
				БанковскийСчет.Банк, БанковскийСчет.НомерСчета);
				
			Если ЗначениеЗаполнено(ТекущийОбъект.ОсновнойБанковскийСчет) Тогда
				// Снимаем блокировку для прежнего банковского счета перед его заменой новым.
				РазблокироватьДанныеДляРедактирования(ТекущийОбъект.ОсновнойБанковскийСчет, УникальныйИдентификатор);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(НайденныйБанковскийСчет) Тогда
				ТекущийОбъект.ОсновнойБанковскийСчет = НайденныйБанковскийСчет;
				ОсновнойБанковскийСчетОбъект = НайденныйБанковскийСчет.ПолучитьОбъект();
				ЗначениеВРеквизитФормы(ОсновнойБанковскийСчетОбъект, "БанковскийСчет");
				ИзмененБанковскийСчет = Ложь;
			Иначе
				ТекущийОбъект.ОсновнойБанковскийСчет = Справочники.БанковскиеСчета.ПолучитьСсылку();
				ОбъектРегистрации = Справочники.БанковскиеСчета.СоздатьЭлемент();
				ОбъектРегистрации.Банк = БанковскийСчет.Банк;
				ОбъектРегистрации.НомерСчета = БанковскийСчет.НомерСчета;
				ЗначениеВРеквизитФормы(ОбъектРегистрации, "БанковскийСчет");
			КонецЕсли;
			
		Иначе
			ТекущийОбъект.ОсновнойБанковскийСчет = Справочники.БанковскиеСчета.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПередЗаписьюНаСервереКонтрагент(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаписатьОсновнойБанковскийСчет(ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	ОбщегоНазначенияКлиент.ОповеститьОбИзмененииОбъекта(Объект.Ссылка);
	
	ОповещениеОСозданииКонтрагента = ОповещениеОСозданииКонтрагента();
	Если Не ОповещениеОСозданииКонтрагента = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОповещениеОСозданииКонтрагента, Объект.Ссылка);
		ОписаниеОповещенияОЗакрытии = Неопределено;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	Если ФормироватьНаименованиеПолноеАвтоматически Тогда
		Объект.НаименованиеПолное = Объект.Наименование;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеПриИзменении(Элемент)
	
	ФормироватьНаименованиеПолноеАвтоматически = ПустаяСтрока(Объект.НаименованиеПолное)
		ИЛИ Объект.НаименованиеПолное = Объект.Наименование;
	
КонецПроцедуры

&НаКлиенте
Процедура ЮрФизЛицоПриИзменении(Элемент)
	
	ЮрФизЛицоПриИзмененииНаСервере();
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	РеквизитыПроверкиКонтрагентов.ЭтоЮридическоеЛицо =
		(Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо"));
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ИННПриИзменении(Элемент)
	
	Объект.ИНН = СокрЛП(Объект.ИНН);
	ПриИзмененииИНН(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КПППриИзменении(Элемент)
	
	Объект.КПП = СокрЛП(Объект.КПП);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

КонецПроцедуры

&НаКлиенте
Процедура КодОКОПФПриИзменении(Элемент)
	
	УстановитьЗаголовокКодовСтатистики(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КодПоОКПОПриИзменении(Элемент)
	
	УстановитьЗаголовокКодовСтатистики(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура БанкПриИзменении(Элемент)
	
	ИзмененБанковскийСчет = Истина;
	
	УстановитьЗаголовокОсновногоБанковскогоСчета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура БанкОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ ЗаблокироватьБанковскийСчетПриРедактировании() Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НомерСчетаПриИзменении(Элемент)
	
	Если НЕ ЗаблокироватьБанковскийСчетПриРедактировании() Тогда
		Возврат;
	КонецЕсли;
	
	ИзмененБанковскийСчет = Истина;
	
	УстановитьЗаголовокОсновногоБанковскогоСчета(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоДаннымЕГР(Команда)
	
	Если НЕ ЗначениеЗаполнено(ПолеПоискаИНННаименование) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Введите ИНН или Наименование'"));
		ТекущийЭлемент = Элементы.ПолеПоискаИНННаименование;
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоДаннымЕдиныхГосРеестровНаКлиенте(ПолеПоискаИНННаименование);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрагента(Команда)
	
	ПроверкаКонтрагентовКлиент.ПроверитьКонтрагентаПоКнопке(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьАдресныйКлассификатор(Команда)
	
	АдресныйКлассификаторКлиент.ЗагрузитьАдресныйКлассификатор();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	ФормироватьНаименованиеПолноеАвтоматически = ПустаяСтрока(Объект.НаименованиеПолное)
		ИЛИ Объект.НаименованиеПолное = Объект.Наименование;
	
	Элементы.ГруппаЗаполнениеПоДаннымЕГР.Видимость = Не ЗначениеЗаполнено(Объект.Ссылка);
	
	УстановитьЗаголовокКодовСтатистики(ЭтотОбъект);
	
	УстановитьЗаголовокОсновногоБанковскогоСчета(ЭтотОбъект);
	
	УстановитьЗаголовокКонтактнойИнформации(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормойНаСервере()
	
	ЮрФизЛицоПриИзмененииНаСервере();
	
	ИспользуетсяСправочникПартнеры = Ложь;
	ОбменСКонтрагентамиКЭДО.ДополнительнаяАналитикаКонтрагентовСправочникПартнеры(ИспользуетсяСправочникПартнеры);
	Элементы.Партнер.Видимость = ИспользуетсяСправочникПартнеры;
	
	АдресныйКлассификаторПуст = АдресныйКлассификаторПуст();
	Элементы.ГруппаЗагрузкаАдресногоКлассификатора.Видимость = АдресныйКлассификаторПуст;
	Элементы.ГруппаЗагрузкаАдресногоКлассификатора.Доступность = НЕ ТолькоПросмотр;
	
	УстановитьЗаголовокКонтактнойИнформации(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЮрФизЛицоПриИзмененииНаСервере()
	
	Если Объект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		
		Элементы.ГруппаИНН.Видимость = Истина;
		Элементы.ГруппаКПП.Видимость = Истина;
		Элементы.ГруппаКодыСтатистики.Видимость = Истина;
		Элементы.ОГРН.Видимость = Истина;
		Элементы.ОГРН.Заголовок = НСтр("ru = 'ОГРН'");
		Элементы.ГруппаИдентификаторЮридическогоЛица.Видимость = Ложь;
		
	ИначеЕсли Объект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент Тогда
		
		Элементы.ГруппаИНН.Видимость = Ложь;
		Элементы.ГруппаКПП.Видимость = Ложь;
		Элементы.ГруппаКодыСтатистики.Видимость = Ложь;
		Элементы.ОГРН.Видимость = Ложь;
		Элементы.ГруппаИдентификаторЮридическогоЛица.Видимость = Истина;
		
	Иначе
		
		Элементы.ГруппаИНН.Видимость = Истина;
		Элементы.ГруппаКПП.Видимость = Ложь;
		Элементы.ГруппаКодыСтатистики.Видимость = Истина;
		Элементы.ОГРН.Видимость = Истина;
		Элементы.ОГРН.Заголовок = НСтр("ru = 'ОГРНИП'");
		Элементы.ГруппаИдентификаторЮридическогоЛица.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииИНН(ЗаполнитьРеквизиты = Ложь)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	Если ЗаполнитьРеквизиты Тогда
		Если Не Элементы.ГруппаЗаполнениеПоДаннымЕГР.Видимость Тогда
			// Это не режим заполнения по Наименованию.
			ЗаполнитьПоДаннымЕдиныхГосРеестровНаКлиенте(Объект.ИНН, Истина);
		КонецЕсли;
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокКодовСтатистики(Форма)
	
	Объект = Форма.Объект;
	
	МассивСтрок = Новый Массив;
	
	Если Не ПустаяСтрока(Объект.КодОКОПФ) Тогда
		СтрокаЗаголовка = СтрШаблон(НСтр("ru='ОКОПФ %1'"), Объект.КодОКОПФ);
		МассивСтрок.Добавить(СтрокаЗаголовка);
	КонецЕсли;
	
	Если Не ПустаяСтрока(Объект.КодПоОКПО) Тогда
		СтрокаЗаголовка = СтрШаблон(НСтр("ru='ОКПО %1'"), Объект.КодПоОКПО);
		МассивСтрок.Добавить(СтрокаЗаголовка);
	КонецЕсли;
	
	ТекстЗаголовка = НСтр("ru = 'Коды статистики'");
	Если МассивСтрок.Количество() Тогда
		ТекстЗаголовка = ТекстЗаголовка + ": " + СтрСоединить(МассивСтрок, ", ");
	КонецЕсли;
	
	Форма.Элементы.ГруппаКодыСтатистики.ЗаголовокСвернутогоОтображения = ТекстЗаголовка;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокОсновногоБанковскогоСчета(Форма);
	
	БанковскийСчет = Форма.БанковскийСчет;
	
	ТекстЗаголовка = НСтр("ru = 'Основной банковский счет'");
	
	Если ЗначениеЗаполнено(БанковскийСчет.НомерСчета) И ЗначениеЗаполнено(БанковскийСчет.Банк) Тогда
		ТекстЗаголовка = СтрШаблон("%1: %2, %3",
			ТекстЗаголовка, БанковскийСчет.НомерСчета, Строка(БанковскийСчет.Банк));
	КонецЕсли;
	
	Форма.Элементы.ГруппаОсновнойБанковскийСчет.ЗаголовокСвернутогоОтображения = ТекстЗаголовка;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокКонтактнойИнформации(Форма)
	
	ТекстЗаголовка = "";
	Для Каждого СтрокаКИ Из Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
		
		Если СтрокаКИ.ИмяРеквизита <> "КонтактнаяИнформацияПолеЮрАдресКонтрагента" 
			И ЗначениеЗаполнено(СтрокаКИ.Представление) Тогда
			
			ШаблонСтроки = ?(ПустаяСтрока(ТекстЗаголовка), " %1: %2", ", %1: %2");
			ТекстЗаголовка = ТекстЗаголовка + СтрШаблон(ШаблонСтроки, НРег(СтрокаКИ.Вид), СтрокаКИ.Представление);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПустаяСтрока(ТекстЗаголовка) Тогда
		ТекстЗаголовка = НСтр("ru='Контактная информация'");
	Иначе
		ТекстЗаголовка = НСтр("ru='Контактная информация:'") + ТекстЗаголовка;
	КонецЕсли;
		
	Форма.Элементы.ГруппаКонтактнаяИнформация.ЗаголовокСвернутогоОтображения = ТекстЗаголовка;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция АдресныйКлассификаторПуст()

	Возврат НЕ АдресныйКлассификатор.АдресныйКлассификаторЗагружен();

КонецФункции

&НаКлиенте
Функция ЗаблокироватьБанковскийСчетПриРедактировании()
	
	Если НЕ БанковскийСчет.Ссылка.Пустая() И НЕ БанковскийСчетЗаблокирован Тогда
		Если НЕ ЗаблокироватьБанковскийСчетПриРедактированииНаСервере(БанковскийСчет.Ссылка, БанковскийСчет.ВерсияДанных, УникальныйИдентификатор) Тогда
			ПоказатьПредупреждение(, НСтр("ru='Не удается внести изменения в реквизиты основного банковского счета. Возможно данные редактируются другим пользователем.'"));
			ПрочитатьОсновнойБанковскийСчет();
			Возврат Ложь;
		Иначе
			БанковскийСчетЗаблокирован = Истина;
			Возврат Истина;
		КонецЕсли;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаблокироватьБанковскийСчетПриРедактированииНаСервере(Ссылка, ВерсияДанных, УникальныйИдентификатор)
	
	Попытка
		ЗаблокироватьДанныеДляРедактирования(Ссылка, ВерсияДанных, УникальныйИдентификатор);
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

&НаСервереБезКонтекста
Функция РазблокироватьБанковскийСчетПриРедактированииНаСервере(Ссылка, ИдентификаторФормы)

	РазблокироватьДанныеДляРедактирования(Ссылка, ИдентификаторФормы);

КонецФункции

&НаСервере
Процедура ПрочитатьОсновнойБанковскийСчет()
	
	Если Не ПравоДоступа("Просмотр", Метаданные.Справочники.БанковскиеСчета) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ОсновнойБанковскийСчет) Тогда
		ОсновнойБанковскийСчетОбъект = Объект.ОсновнойБанковскийСчет.ПолучитьОбъект();
	ИначеЕсли ПравоДоступа("Добавление", Метаданные.Справочники.БанковскиеСчета) Тогда
		ОсновнойБанковскийСчетОбъект = Справочники.БанковскиеСчета.СоздатьЭлемент();
	Иначе
		ОсновнойБанковскийСчетОбъект = Неопределено;
	КонецЕсли;
	
	Если ОсновнойБанковскийСчетОбъект <> Неопределено Тогда
		ЗначениеВРеквизитФормы(ОсновнойБанковскийСчетОбъект, "БанковскийСчет");
		ИзмененБанковскийСчет = Ложь;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаписатьОсновнойБанковскийСчет(ТекущийОбъект)
	
	Если ЗначениеЗаполнено(ТекущийОбъект.ОсновнойБанковскийСчет) И ИзмененБанковскийСчет Тогда
		
		ОбъектРегистрации = РеквизитФормыВЗначение("БанковскийСчет");
		
		Если ОбъектРегистрации.Ссылка.Пустая() Тогда
			ДанныеЗаполнения = Новый Структура;
			ДанныеЗаполнения.Вставить("Владелец", ТекущийОбъект.Ссылка);
			ВалютаДенежныхСредств = Справочники.БанковскиеСчета.ПолучитьВалютуПоНомеруСчета(БанковскийСчет.НомерСчета);
			Если ЗначениеЗаполнено(ВалютаДенежныхСредств) Тогда
				ДанныеЗаполнения.Вставить("ВалютаДенежныхСредств", ВалютаДенежныхСредств);
			КонецЕсли;
			ОбъектРегистрации.УстановитьСсылкуНового(ТекущийОбъект.ОсновнойБанковскийСчет);
			ОбъектРегистрации.Заполнить(ДанныеЗаполнения);
		КонецЕсли;
		
		ОбъектРегистрации.СформироватьНаименование();
		ОбъектРегистрации.Записать();
		
		ЗначениеВРеквизитФормы(ОбъектРегистрации, "БанковскийСчет");
		
		ИзмененБанковскийСчет = Ложь;
		
		Если БанковскийСчетЗаблокирован Тогда
			РазблокироватьДанныеДляРедактирования(ТекущийОбъект.ОсновнойБанковскийСчет, УникальныйИдентификатор);
			БанковскийСчетЗаблокирован = Ложь;
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПослеИзмененияКонтактнойИнформации(Форма, ИмяРеквизита)
	
	Если ИмяРеквизита <> "КонтактнаяИнформацияПолеЮрАдресОрганизации" Тогда
		УстановитьЗаголовокКонтактнойИнформации(Форма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОповещениеОСозданииКонтрагента()

	Результат = Неопределено;
	
	Если ОписаниеОповещенияОЗакрытии = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;

	Если ТипЗнч(ОписаниеОповещенияОЗакрытии.ДополнительныеПараметры) <> Тип("Структура")  Тогда
		Возврат Результат;
	КонецЕсли;

	Результат = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ОписаниеОповещенияОЗакрытии.ДополнительныеПараметры, "ОписаниеОповещенияОСозданииКонтрагента", Неопределено);
	
	Возврат Результат;

КонецФункции

// СтандартныеПодсистемы.КонтактнаяИнформация

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	УправлениеКонтактнойИнформациейКлиент.НачатьИзменение(ЭтотОбъект, Элемент);
	ПослеИзмененияКонтактнойИнформации(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент,, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент,, СтандартнаяОбработка);
КонецПроцедуры

// Параметры:
//  Элемент - ПолеФормы
//  СтандартнаяОбработка - Булево
//
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачатьОчистку(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

// Параметры:
//  Команда - КомандаФормы
//
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	УправлениеКонтактнойИнформациейКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание,
	СтандартнаяОбработка)

	УправлениеКонтактнойИнформациейКлиент.АвтоПодборАдреса(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
		Ожидание, СтандартнаяОбработка);

КонецПроцедуры

// Параметры:
//  Элемент - ПолеФормы
//  ВыбранноеЗначение - Произвольный
//  СтандартнаяОбработка -Булево
//
&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	УправлениеКонтактнойИнформациейКлиент.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, Элемент.Имя,
		СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОбработкаНавигационнойСсылки(Элемент,
	НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачатьОбработкуНавигационнойСсылки(ЭтотОбъект, Элемент,
		НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьОбновлениеКонтактнойИнформации(Результат, ДополнительныеПараметры) Экспорт
	ОбновитьКонтактнуюИнформацию(Результат);
КонецПроцедуры

&НаСервере
Процедура ОбновитьКонтактнуюИнформацию(Результат)
	УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
	Если Результат.Свойство("ИмяРеквизита") Тогда
		ПослеИзмененияКонтактнойИнформации(ЭтотОбъект, Результат.ИмяРеквизита);
	КонецЕсли;
КонецПроцедуры

// Конец СтандартныеПодсистемы.КонтактнаяИнформация

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВСправочнике(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыПоТекстуЗаполнения(ТекстЗаполнения)
	
	Если ЭтоИНН(ТекстЗаполнения) Тогда
		
		Объект.Наименование = "";
		Объект.ИНН = ТекстЗаполнения;
		Объект.ЮрФизЛицо = ?(СтрДлина(ТекстЗаполнения) = 10,
			Перечисления.ЮрФизЛицо.ЮрЛицо,
			Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель);
		
		ЗаполнитьРеквизитыПоИНННаСервере(ТекстЗаполнения);
		ТекстЗаполнения = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДаннымЕдиныхГосРеестровНаКлиенте(СтрокаПоиска, Знач ЗаполнениеПоИНН = Неопределено)
	
	Если ПустаяСтрока(СтрокаПоиска) Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтключитьАвтоЗаполнениеРеквизитов <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОтключитьАвтоЗаполнениеРеквизитов = Истина;
	ПодключитьОбработчикОжидания("Подключаемый_ВключитьАвтоЗаполнениеРеквизитов", 0.1, Истина);
	
	СтрокаПоиска = СокрЛП(СтрокаПоиска);
	
	Если ЗаполнениеПоИНН = Неопределено Тогда
		ЗаполнениеПоИНН = ЭтоИНН(СтрокаПоиска);
	КонецЕсли;
	
	Если ЗаполнениеПоИНН <> Истина И ЗначениеЗаполнено(Объект.ИНН)
		ИЛИ ЗначениеЗаполнено(Объект.КПП)
		ИЛИ ЗначениеЗаполнено(Объект.Наименование)
		ИЛИ ЗначениеЗаполнено(Объект.НаименованиеПолное) Тогда
		
		ТекстВопроса = НСтр("ru='Перезаполнить текущие реквизиты?'");
		Контекст = Новый Структура("ЗаполнениеПоИНН, СтрокаПоиска", ЗаполнениеПоИНН, СтрокаПоиска);
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьРеквизитыПоДаннымЕГРЗавершение", ЭтотОбъект, Контекст);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		Если ЗаполнениеПоИНН Тогда
			ЗаполнитьРеквизитыПоИНННаКлиенте(СтрокаПоиска);
		Иначе
			ЗаполнитьРеквизитыПоНаименованиюНаКлиенте(СтрокаПоиска);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоДаннымЕГРЗавершение(Ответ, Контекст) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Если Контекст.ЗаполнениеПоИНН Тогда
			ЗаполнитьРеквизитыПоИНННаКлиенте(Контекст.СтрокаПоиска);
		Иначе
			ЗаполнитьРеквизитыПоНаименованиюНаКлиенте(Контекст.СтрокаПоиска);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоИНННаКлиенте(СтрокаИНН)
	
	ИзменилсяИНН = (СтрокаИНН <> Объект.ИНН);
	
	Состояние(
		НСтр("ru = 'Получение данных'"),
		,
		НСтр("ru = 'Пожалуйста, подождите...'"));
	ОписаниеОшибки = "";
	ЗаполнитьРеквизитыПоИНННаСервере(СтрокаИНН, ОписаниеОшибки);
	Состояние();
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		
		ОбработчикЗавершенияОбработкиОшибки = Новый ОписаниеОповещения(
			"ОбработатьОшибкуЗаполнитьРеквизитыПоИННЗавершение",
			ЭтотОбъект,
			СтрокаИНН);
		ДополнительныеПараметрыОбработкиОшибки =
			РаботаСКонтрагентамиКлиент.НовыйДополнительныеПараметрыОбработкиОшибки();
		ДополнительныеПараметрыОбработкиОшибки.ПредставлениеДействия    = НСтр("ru = 'Автоматическое заполнение реквизитов контрагентов'");
		ДополнительныеПараметрыОбработкиОшибки.ИдентификаторМестаВызова = "CounterpartyCard";
		ДополнительныеПараметрыОбработкиОшибки.Форма                    = ЭтотОбъект;
		
		РаботаСКонтрагентамиКлиент.ОбработатьОшибку(
			ОписаниеОшибки,
			ОбработчикЗавершенияОбработкиОшибки,
			ДополнительныеПараметрыОбработкиОшибки);
		
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	РеквизитыПроверкиКонтрагентов.ЭтоЮридическоеЛицо =
		(Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо"));
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	Если ИзменилсяИНН Тогда
		// Т.к. изменился ИНН, необходимо обработать это изменение без
		// повторного заполнения реквизитов по ИНН.
		ПриИзмененииИНН(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОшибкуЗаполнитьРеквизитыПоИННЗавершение(Результат, СтрокаИНН) Экспорт
	
	Если Результат.ПовторитьДействие Тогда
		ЗаполнитьРеквизитыПоИНННаКлиенте(СтрокаИНН);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоНаименованиюНаКлиенте(СтрокаНаименование)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтрокаПоиска", СтрокаНаименование);
	ДопПараметры = Новый Структура;
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьРеквизитыПоНаименованиюЗавершение", ЭтотОбъект, ДопПараметры);
	ОткрытьФорму("ОбщаяФорма.ЗаполнениеРеквизитовКонтрагента",
		ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоНаименованиюЗавершение(Результат, ДопПараметры) Экспорт

	Если НЕ ЭтоИНН(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	// Заполнение реквизитов по наименованию выполняется только для юридических лиц.
	ЗаполнитьРеквизитыПоИНННаКлиенте(Результат);
	ТекущийЭлемент = Элементы.Наименование;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыПоИНННаСервере(Знач СтрокаИНН, ОписаниеОшибки = "")
	
	ДлинаИНН = СтрДлина(СтрокаИНН);
	Если ДлинаИНН = 10 Тогда
		ЭтоЮридическоеЛицо = Истина;
	ИначеЕсли ДлинаИНН = 12 Тогда
		ЭтоЮридическоеЛицо = Ложь;
	Иначе
		ЭтоЮридическоеЛицо = Объект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
	КонецЕсли;
	
	Если ЭтоЮридическоеЛицо Тогда
		
		РеквизитыЮридическогоЛицаПоИНН = РаботаСКонтрагентами.СведенияОЮридическомЛицеПоИНН(СтрокаИНН);
		ОписаниеОшибки = РеквизитыЮридическогоЛицаПоИНН.ОписаниеОшибки;
		РеквизитыКонтрагента = РеквизитыЮридическогоЛицаПоИНН.ЕГРЮЛ;
		
		Если Не ЗначениеЗаполнено(РеквизитыКонтрагента) И Не ЗначениеЗаполнено(ОписаниеОшибки) Тогда
			ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось получить сведения о юридическом лице по ИНН %1'"), СтрокаИНН);
		КонецЕсли;
		
	Иначе
		РеквизитыКонтрагента = РаботаСКонтрагентами.РеквизитыПредпринимателяПоИНН(СтрокаИНН);
		ОписаниеОшибки = РеквизитыКонтрагента.ОписаниеОшибки;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Объект, РеквизитыКонтрагента);
	
	Если ЭтоЮридическоеЛицо Тогда
		Объект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
		ЗаполнитьЭлементКонтактнойИнформации(
			Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента,
			РеквизитыКонтрагента.ЮридическийАдрес);
	Иначе
		Объект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель;
		ЗаполнитьЭлементКонтактнойИнформации(
			Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента,
			Неопределено);
	КонецЕсли;
	
	ЮрФизЛицоПриИзмененииНаСервере();
	
	Объект.НаименованиеПолное = РеквизитыКонтрагента.НаименованиеСокращенное;
	СтруктураНаименования = КлиентЭДОКлиентСервер.РазложитьСтрокуНаименованияОрганизации(
		РеквизитыКонтрагента.НаименованиеПолное, Объект.ЮрФизЛицо);
	Если ЗначениеЗаполнено(СтруктураНаименования.ОрганизационноПравоваяФормаСокращенно) Тогда
		Объект.Наименование = СтрШаблон(НСтр("ru = '%1 %2'"),
			СтруктураНаименования.Наименование, СтруктураНаименования.ОрганизационноПравоваяФормаСокращенно);
	Иначе
		Объект.Наименование = Объект.НаименованиеПолное;
	КонецЕсли;
	
	ФормироватьНаименованиеПолноеАвтоматически = ПустаяСтрока(Объект.НаименованиеПолное)
		ИЛИ Объект.НаименованиеПолное = Объект.Наименование;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЭлементКонтактнойИнформации(ВидКонтактнойИнформации, СтруктураДанных)
	
	Отбор  = Новый Структура("Вид", ВидКонтактнойИнформации);
	Строки = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
	ДанныеСтроки = ?(Строки.Количество() = 0, Неопределено, Строки[0]);
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДанных = Неопределено Или Не ЗначениеЗаполнено(СтруктураДанных.Представление) Тогда
		
		ДанныеСтроки.Представление            = "";
		ДанныеСтроки.Значение                 = "";
		ЭтотОбъект[ДанныеСтроки.ИмяРеквизита] = "";
		
	Иначе
		
		ДанныеСтроки.Представление            = СтруктураДанных.Представление;
		ДанныеСтроки.Значение                 = СтруктураДанных.КонтактнаяИнформация;
		ЭтотОбъект[ДанныеСтроки.ИмяРеквизита] = СтруктураДанных.Представление;
		
	КонецЕсли;
	
	Результат = Новый Структура("ОбновитьКонтекстноеМеню", Истина);
	УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоИНН(СтрокаИНН)
	Возврат ЗначениеЗаполнено(СтрокаИНН)
		И ТипЗнч(СтрокаИНН) = Тип("Строка")
		И (СтрДлина(СтрокаИНН) = 10 ИЛИ СтрДлина(СтрокаИНН) = 12)
		И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрокаИНН);
КонецФункции

&НаКлиенте
Процедура Подключаемый_ВключитьАвтоЗаполнениеРеквизитов()

	ОтключитьАвтоЗаполнениеРеквизитов = Неопределено;

КонецПроцедуры 

// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

// СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ЭлектронноеВзаимодействие.ОбменСКонтрагентами

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКомандыЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры

// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

#КонецОбласти
