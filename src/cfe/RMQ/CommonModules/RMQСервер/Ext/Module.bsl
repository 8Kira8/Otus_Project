Процедура ОтправитьСообщениеСервер() Экспорт
	
	КлиентКомпоненты = ПолучитьКомпонентуСервер();
	ОтправитьСообщениеКлиентСервер(КлиентКомпоненты);
	
КонецПроцедуры

Функция ПолучитьКомпонентуСервер()
	
	КлиентКомпоненты = Неопределено;
	Если Не ИнициализироватьКомпонентуКлиентСервер(КлиентКомпоненты) Тогда
		
		ПодключитьКомпонентуСервер();
		ИнициализироватьКомпонентуКлиентСервер(КлиентКомпоненты);
		
	КонецЕсли;
	
	Возврат КлиентКомпоненты;
КонецФункции

Процедура ПодключитьКомпонентуСервер(КомпонентаПодключена = Неопределено)
	
	АдресВоВременномХранилище = ПолучитьАдресМакетаКомпановкиНаСервере(	Новый УникальныйИдентификатор()); 

	КомпонентаПодключена = ПодключитьВнешнююКомпоненту(
			АдресВоВременномХранилище,
			"BITERP",
			ТипВнешнейКомпоненты.Native);
	Сообщить(НСтр("ru = 'Компонента подключена!'"));
КонецПроцедуры

Функция ИнициализироватьКомпонентуКлиентСервер(Компонента)
	
	Попытка
		Компонента  = Новый("AddIn.BITERP.PinkRabbitMQ");
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

Процедура ОтправитьСообщениеКлиентСервер(КлиентКомпоненты)
				
	Попытка
		КлиентКомпоненты.Connect(
			Константы.Адрес.Получить(),
			Константы.Порт.Получить(),
			Константы.Логин.Получить(),
			Константы.Пароль.Получить(),
			Константы.ВиртуальныйХост.Получить());  
			
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 100
			|	ИсходящиеСообщенияRMQ.Ссылка КАК Ссылка,
			|	ИсходящиеСообщенияRMQ.КлючМаршрутизации КАК КлючМаршрутизации,
			|	ИсходящиеСообщенияRMQ.ТекстСообщения КАК ТекстСообщения,
			|	ИсходящиеСообщенияRMQ.СообщениеОтправлено КАК СообщениеОтправлено
			|ИЗ
			|	Справочник.ИсходящиеСообщенияRMQ КАК ИсходящиеСообщенияRMQ
			|ГДЕ
			|	ИсходящиеСообщенияRMQ.СообщениеОтправлено = ЛОЖЬ";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();   
		
		ТочкаОбмена    = Константы.ТочкаОбмена.Получить();
		ИмяОчереди     = Константы.ИмяОчереди.Получить();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ТекстСообщения = ВыборкаДетальныеЗаписи.ТекстСообщения;
			КлючМаршрутизации = ВыборкаДетальныеЗаписи.КлючМаршрутизации;
			
			КлиентКомпоненты.BasicPublish(
				ТочкаОбмена,
				КлючМаршрутизации,
				ТекстСообщения,
				1,
				Ложь);
				
			СсылкаЭлементаОтправки = ВыборкаДетальныеЗаписи.Ссылка;
			Объект = СсылкаЭлементаОтправки.ПолучитьОбъект();
			Объект.СообщениеОтправлено = Истина; 
			Объект.Записать();
			
		КонецЦикла;
		
	Исключение
		СистемнаяОшибка = ОписаниеОшибки();
		ТекстСообщения = "Ошибка отправки сообщения!%СистемнаяОшибка%";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СистемнаяОшибка%", СистемнаяОшибка);
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
		
	Сообщить("Сообщение успешно отправлено!");
КонецПроцедуры     

Функция ПолучитьАдресМакетаКомпановкиНаСервере(УникальныйИдентификатор)
	
	МакетВнешнейКомпоненты    =  ПолучитьОбщийМакет("RMQ");
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(МакетВнешнейКомпоненты, УникальныйИдентификатор);
	
	Возврат АдресВоВременномХранилище;
	
КонецФункции

Процедура ПриЗаписиЭлементаПриЗаписи(Источник, Отказ) Экспорт 
	
	Сериализатор = Новый СериализаторXDTO(ФабрикаXDTO);
	Запись = Новый ЗаписьJSON; 	
	Запись.УстановитьСтроку();
	Сериализатор.ЗаписатьJSON(Запись, Источник, НазначениеТипаXML.Явное);
	ТекстСообщения = Запись.Закрыть();
	
	НовоеСообщение = Справочники.ИсходящиеСообщенияRMQ.СоздатьЭлемент(); 
	НовоеСообщение.КлючМаршрутизации = "rout_test." + Новый УникальныйИдентификатор(); 
	НовоеСообщение.ТекстСообщения = ТекстСообщения;   
	НовоеСообщение.Записать();
	
КонецПроцедуры

Процедура ПрочитатьСообщениеСервер() Экспорт
	
	КлиентКомпоненты = ПолучитьКомпонентуСервер();
	ПрочитатьСообщениеКлиентСервер(КлиентКомпоненты);
	
КонецПроцедуры     

Процедура ПрочитатьСообщениеКлиентСервер(КлиентКомпоненты) 
	
	Попытка
		КлиентКомпоненты.Connect(
			Константы.Адрес.Получить(),
			Константы.Порт.Получить(),
			Константы.Логин.Получить(),
			Константы.Пароль.Получить(),
			Константы.ВиртуальныйХост.Получить());  
		
		ИмяОчереди = Константы.ИмяОчереди.Получить();
		
		Попытка
		
			Потребитель = КлиентКомпоненты.BasicConsume(ИмяОчереди, "", Истина, Ложь, 0);
			
			ОтветноеСообщение = "";
			Если КлиентКомпоненты.BasicConsumeMessage("", ОтветноеСообщение, 5) Тогда
				КлиентКомпоненты.BasicAck();
								
				ТекстСообщения = Лев(ОтветноеСообщение, СтрДлина(ОтветноеСообщение)-2); 
				ПоискВхождения = СтрНайти(ОтветноеСообщение, "{", , , 2); 
				ТекстСообщения = СокрЛП(Сред(ТекстСообщения, ПоискВхождения));
				
				ПараметрыСообщения = СокрЛП(Сред(ОтветноеСообщение, 1, СтрНайти(ОтветноеСообщение, ",")-1));

				НовоеСообщение = Справочники.ВходящиеСообщенияRMQ.СоздатьЭлемент();
				НовоеСообщение.ТекстСообщения = ТекстСообщения;
				НовоеСообщение.ПараметрыСообщения = ПараметрыСообщения  + Символы.ПС + "}"; 
				НовоеСообщение.СообщениеПолучено = Истина;
				НовоеСообщение.Записать();
				ТекстСообщения = НСтр("ru='Сообщение успешно прочитано!'");
			Иначе
				ТекстСообщения = НСтр("ru='Очередь пустая!'");
			КонецЕсли; 
						
			КлиентКомпоненты.BasicCancel("");  
			
			СоздатьЭлементСправочника();
		Исключение
			ВызватьИсключение КлиентКомпоненты.GetLastError();
		КонецПопытки;
	Исключение
		СистемнаяОшибка = ОписаниеОшибки();
		ТекстСообщения = "Ошибка чтения сообщения!%СистемнаяОшибка%";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СистемнаяОшибка%", СистемнаяОшибка);
		ВызватьИсключение ТекстСообщения;
	КонецПопытки; 
		
КонецПроцедуры

Процедура СоздатьЭлементСправочника()Экспорт

	Запрос = Новый Запрос;
	
	Запрос.Текст =  "ВЫБРАТЬ ПЕРВЫЕ 100
	                |	ВходящиеСообщенияRMQ.Ссылка КАК Ссылка,
	                |	ВходящиеСообщенияRMQ.ТекстСообщения КАК ТекстСообщения,
	                |	ВходящиеСообщенияRMQ.СообщениеПолучено КАК СообщениеПолучено,
	                |	ВходящиеСообщенияRMQ.ЭлементСоздан КАК ЭлементСоздан
	                |ИЗ
	                |	Справочник.ВходящиеСообщенияRMQ КАК ВходящиеСообщенияRMQ
	                |ГДЕ
	                |	ВходящиеСообщенияRMQ.ЭлементСоздан = ЛОЖЬ
	                |	И ВходящиеСообщенияRMQ.СообщениеПолучено = ИСТИНА" ;
					
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();  
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл  
		
		Чтение = Новый ЧтениеJSON; 
		Чтение.УстановитьСтроку(ВыборкаДетальныеЗаписи.ТекстСообщения); 
		
		ОбъектИзJSON = ПрочитатьJSON(Чтение);
		
		НовыйЭлемент = Справочники.ОтусКонтрагентыПолучение.СоздатьЭлемент();
		НовыйЭлемент.Наименование	 				= ОбъектИзJSON.Description; 
		НовыйЭлемент.ИНН 			 				= ОбъектИзJSON.ИНН;
		НовыйЭлемент.КодОКОПФ 		 				= ОбъектИзJSON.КодОКОПФ;
		НовыйЭлемент.КодПоОКПО 		 				= ОбъектИзJSON.КодПоОКПО;
		НовыйЭлемент.Комментарий 	 				= ОбъектИзJSON.Комментарий;
		НовыйЭлемент.КПП 			 				= ОбъектИзJSON.КПП;
		НовыйЭлемент.НаименованиеПолное 			= ОбъектИзJSON.НаименованиеПолное;
		НовыйЭлемент.ОГРН 							= ОбъектИзJSON.ОГРН;
		НовыйЭлемент.ОсновнойБанковскийСчет 		= Справочники.БанковскиеСчета.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектИзJSON.ОсновнойБанковскийСчет));
		НовыйЭлемент.ЮрФизЛицо 						= XMLЗначение(Тип("ПеречислениеСсылка.ЮрФизЛицо"), ОбъектИзJSON.ЮрФизЛицо);
		НовыйЭлемент.ИдентификаторЮридическогоЛица  = ОбъектИзJSON.ИдентификаторЮридическогоЛица;
		
		Для каждого СтрокаТЧ Из ОбъектИзJSON.КонтактнаяИнформация Цикл
		
			СтрокаКИ = НовыйЭлемент.КонтактнаяИнформация.Добавить();
			СтрокаКИ.Тип 					= XMLЗначение(Тип("ПеречислениеСсылка.ТипыКонтактнойИнформации"), СтрокаТЧ.Тип); 
		    СтрокаКИ.Вид 					= Справочники.ВидыКонтактнойИнформации.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТЧ.Вид));
			СтрокаКИ.Представление 			= СтрокаТЧ.Представление;
			СтрокаКИ.Страна 				= СтрокаТЧ.Страна;
			СтрокаКИ.Регион 				= СтрокаТЧ.Регион;
			СтрокаКИ.Город 					= СтрокаТЧ.Город;
			СтрокаКИ.АдресЭП 				= СтрокаТЧ.АдресЭП;
			СтрокаКИ.ДоменноеИмяСервера 	= СтрокаТЧ.ДоменноеИмяСервера;
			СтрокаКИ.НомерТелефона 			= СтрокаТЧ.НомерТелефона;
			СтрокаКИ.НомерТелефонаБезКодов 	= СтрокаТЧ.НомерТелефонаБезКодов;
			СтрокаКИ.ВидДляСписка 			= Справочники.ВидыКонтактнойИнформации.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТЧ.ВидДляСписка));
			
		КонецЦикла;
		НовыйЭлемент.Записать();
		
		Если Справочники.ОтусКонтрагентыПолучение.НайтиПоНаименованию(ОбъектИзJSON.Description) <> Справочники.ОтусКонтрагентыПолучение.ПустаяСсылка()  Тогда
		
			СсылкаКонтроллера = ВыборкаДетальныеЗаписи.Ссылка;
			Объект = СсылкаКонтроллера.ПолучитьОбъект();
			Объект.ЭлементСоздан = Истина; 
			Объект.Записать();
		
		КонецЕсли;   
		
		Чтение.Закрыть();  
						
	КонецЦикла;
	
КонецПроцедуры


