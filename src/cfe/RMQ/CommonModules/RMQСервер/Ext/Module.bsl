&НаСервере
Процедура ОтправитьСообщениеСервер() Экспорт
	
	КлиентКомпоненты = ПолучитьКомпонентуСервер();
	ОтправитьСообщениеКлиентСервер(КлиентКомпоненты);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКомпонентуСервер()
	
	КлиентКомпоненты = Неопределено;
	Если Не ИнициализироватьКомпонентуКлиентСервер(КлиентКомпоненты) Тогда
		
		ПодключитьКомпонентуСервер();
		ИнициализироватьКомпонентуКлиентСервер(КлиентКомпоненты);
		
	КонецЕсли;
	
	Возврат КлиентКомпоненты;
КонецФункции

Процедура ПодключитьКомпонентуСервер(КомпонентаПодключена = Неопределено)
	
	//АдресВоВременномХранилище = ПолучитьАдресМакетаКомпановкиНаСервере(ЭтаФорма.УникальныйИдентификатор); 
	АдресВоВременномХранилище = ПолучитьАдресМакетаКомпановкиНаСервере(	Новый УникальныйИдентификатор()); 

	КомпонентаПодключена = ПодключитьВнешнююКомпоненту(
			АдресВоВременномХранилище,
			"BITERP",
			ТипВнешнейКомпоненты.Native);
	Сообщить(НСтр("ru = 'Компонента подключена!'"));
КонецПроцедуры

&НаСервере
Функция ИнициализироватьКомпонентуКлиентСервер(Компонента)
	
	Попытка
		Компонента  = Новый("AddIn.BITERP.PinkRabbitMQ");
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

&НаСервере
Процедура ОтправитьСообщениеКлиентСервер(КлиентКомпоненты)
				
	Попытка
		КлиентКомпоненты.Connect(
			Константы.Адрес.Получить(),
			Константы.Порт.Получить(),
			Константы.Логин.Получить(),
			Константы.Пароль.Получить(),
			Константы.ВиртуальныйХост.Получить());  
			
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 100
			|	ИсходящиеСообщенияRMQ.Ссылка КАК Ссылка,
			|	ИсходящиеСообщенияRMQ.КлючМаршрутизации КАК КлючМаршрутизации,
			|	ИсходящиеСообщенияRMQ.ТестСообщения КАК ТестСообщения,
			|	ИсходящиеСообщенияRMQ.СообщениеОтправлено КАК СообщениеОтправлено
			|ИЗ
			|	Справочник.ИсходящиеСообщенияRMQ КАК ИсходящиеСообщенияRMQ
			|ГДЕ
			|	ИсходящиеСообщенияRMQ.СообщениеОтправлено = ЛОЖЬ";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();   
		
		ТочкаОбмена    = Константы.ТочкаОбмена.Получить();
		ИмяОчереди     = Константы.ИмяОчереди.Получить();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ТекстСообщения = ВыборкаДетальныеЗаписи.ТестСообщения;
			КлючМаршрутизации = ВыборкаДетальныеЗаписи.КлючМаршрутизации;
			
			КлиентКомпоненты.BasicPublish(
				ТочкаОбмена,
				КлючМаршрутизации,
				ТекстСообщения,
				1,
				Ложь);
				
			СсылкаЭлементаОтправки = ВыборкаДетальныеЗаписи.Ссылка;
			Объект = СсылкаЭлементаОтправки.ПолучитьОбъект();
			Объект.СообщениеОтправлено = Истина; 
			Объект.Записать();
			
		КонецЦикла;
		
	Исключение
		СистемнаяОшибка = ОписаниеОшибки();
		ТекстСообщения = "Ошибка отправки сообщения!%СистемнаяОшибка%";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СистемнаяОшибка%", СистемнаяОшибка);
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
		
	Сообщить("Сообщение успешно отправлено!");
КонецПроцедуры     

&НаСервере
Функция ПолучитьАдресМакетаКомпановкиНаСервере(УникальныйИдентификатор)
	
	//МакетВнешнейКомпоненты    = РеквизитФормыВЗначение("Объект").ПолучитьМакет("ВнешняяКомпонента");
	МакетВнешнейКомпоненты    =  ПолучитьОбщийМакет("RMQ");
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(МакетВнешнейКомпоненты, УникальныйИдентификатор);
	
	Возврат АдресВоВременномХранилище;
	
КонецФункции


Процедура ПриЗаписиЭлементаПриЗаписи(Источник, Отказ) Экспорт 
	
	Сериализатор = Новый СериализаторXDTO(ФабрикаXDTO);
	Запись = Новый ЗаписьJSON; 	
	Запись.УстановитьСтроку();
	Сериализатор.ЗаписатьJSON(Запись, Источник, НазначениеТипаXML.Явное);
	ТекстСообщения = Запись.Закрыть();
	
	НовоеСообщение = Справочники.ИсходящиеСообщенияRMQ.СоздатьЭлемент(); 
	НовоеСообщение.КлючМаршрутизации = "rout_test." + Новый УникальныйИдентификатор(); 
	НовоеСообщение.ТестСообщения = ТекстСообщения;   
	НовоеСообщение.Записать();
	
КонецПроцедуры

